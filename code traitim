#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <turtlesim/Pose.h>

#include <iostream>
#include <queue>
using namespace std;

float x, y, theta, v, vt;
int state = 0;
float target_angle;
float target_distance;
ros::Publisher pub;

geometry_msgs::Twist getMessage(double linear_x, double angular_z)
{
    geometry_msgs::Twist msg;
    msg.linear.x = linear_x;
    msg.angular.z = angular_z;
    return msg;
}

void handleStateRotate()
{
    if (abs(target_angle-theta) > 0.01) {
        pub.publish(getMessage(0, target_angle-theta));
    } else {
        pub.publish(getMessage(0, 0));
        state = 0;
    }
}

void handleStateStraightForward(float prevx, float prevy)
{
    float dist = sqrt((x-prevx)*(x-prevx)+(y-prevy)*(y-prevy));
    target_distance -= dist;
    if (target_distance <= 0) {
        state = 0;
        pub.publish(getMessage(0, 0));
    } else {
        pub.publish(getMessage(1, 0));
    }
}

void poseCallback(const turtlesim::Pose::ConstPtr& msg)
{
    float prevx = x, prevy = y;
    cout << "x=" << msg->x << " y=" << msg->y 
         << " theta=" << msg->theta << " v=" << msg->linear_velocity
         << " vtheta=" << msg->angular_velocity << endl;
    x = msg->x, y = msg->y, theta = msg->theta, 
    v = msg->linear_velocity, vt = msg->angular_velocity;

    if (state == 1) handleStateRotate();

    if (state == 2) handleStateStraightForward(prevx, prevy);
}


void rotate(float angle)
{
    state = 1;
    target_angle = angle;
}

void straight_forward(float distance)
{
    state = 2;
    target_distance = distance;
}

struct Action 
{
    int type;
    float target_angle;
    float target_distance;
};


int main(int argc, char** argv)
{
    ros::init(argc, argv, "myturtle_control");
    ros::NodeHandle h;
    pub = h.advertise<geometry_msgs::Twist>("turtle1/cmd_vel", 1000);
    ros::Subscriber sub =
        h.subscribe("/turtle1/pose", 1000, poseCallback);
    ros::Rate loopRate(10);
//********************

queue<Action> q;
    Action a1, a2;
    a1.type = 1, a1.target_angle =-0.7853981634 ;
    a2.type = 2, a2.target_distance = 3;
    q.push(a1); q.push(a2);

 a1.type = 1, a1.target_angle =0.7853981634;
    a2.type = 2, a2.target_distance =3;
    q.push(a1); q.push(a2);
 a1.type = 1, a1.target_angle =1.570796327;
    a2.type = 2, a2.target_distance =1;
    q.push(a1); q.push(a2);
 a1.type = 1, a1.target_angle =1.850049007 ;
    a2.type = 2, a2.target_distance = 0.75;
    q.push(a1); q.push(a2);
 a1.type = 1, a1.target_angle =3.141592654 ;
   a2.type = 2, a2.target_distance = 1;
 q.push(a1); q.push(a2);
 a1.type = 1, a1.target_angle =-2.617993878 ;
    a2.type = 2, a2.target_distance = 1;
 q.push(a1); q.push(a2);
a1.type = 1, a1.target_angle =2.617993878 ;
    a2.type = 2, a2.target_distance = 1;
    q.push(a1); q.push(a2);
a1.type = 1, a1.target_angle =3.141592654 ;
   a2.type = 2, a2.target_distance = 1;
 q.push(a1); q.push(a2);
 a1.type = 1, a1.target_angle =-1.850049007 ;
    a2.type = 2, a2.target_distance = 0.75;
    q.push(a1); q.push(a2);
a1.type = 1, a1.target_angle =-1.570796327;
    a2.type = 2, a2.target_distance =1;
    q.push(a1); q.push(a2);


    bool in_action = false;
    while (ros::ok()) {
        //pub.publish(getMessage(linear_x, 5.0));
        //linear_x += 1.0;
        if (state == 0 && !in_action) {
            if (q.size() > 0) {
                Action a = q.front();
                q.pop();
                if (a.type == 1) rotate(a.target_angle);
                else if (a.type == 2) straight_forward(a.target_distance);
                in_action = true;
            }
        }
        if (state == 0 && in_action) {
            in_action = false;
        }
        loopRate.sleep();
        ros::spinOnce();
    }

    return 0;
}
